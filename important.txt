Complaint Management:
1. User authentication with 1 admin user.
2. Accept complains from all users.
3. Allow admin (with special priveledges) to update the status of complaint from pending, to processing and complete.
4. The person who created the complaint should be finally able to close the complaint after resolution.
5. Make 2 different dashboards for normal users and resolving authorities.

--

===============================================================================

Some setup you must do manually if you haven't yet:

  1. Ensure you have defined default url options in your environments files. Here
     is an example of default_url_options appropriate for a development environment
     in config/environments/development.rb:

       config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }

     In production, :host should be set to the actual host of your application.

  2. Ensure you have defined root_url to *something* in your config/routes.rb.
     For example:

       root to: "home#index"

  3. Ensure you have flash messages in app/views/layouts/application.html.erb.
     For example:

       <p class="notice">< %= notice %></p>
       <p class="alert"><%= alert %></p>

  4. You can copy Devise views (for customization) to your app by running:

       rails g devise:views

=======================================================================

Steps:
> created the app ComplaintManagement
> generated the scaffold Complaint name:string title:string details:text
> added default route `root "complaints#index"` to routes.rb
> changed database.yml
> added gem 'devise' and did bundle install
> generate views for User, and default views inside views folder for modification.
> added filter `before_action :authenticate_user!` to complaints_controller.rb
> # Use bootstrap-sass & jquery-rails to generate list of routes for easier modification
gem 'bootstrap-sass', '3.3.7'
gem 'jquery-rails', '~> 4.3', '>= 4.3.3'
> Added custom css
> Updated application.html.erb to show sign in, up and account in app\
-----------
Also the function user_signed_in is provided to you by devise.
-------------
> rails generate migration add_column_user_id_to_complaints user_id:integer

> added the lines `has_many :complaints` to models/user.rb 

> `belongs_to :user` & `validates_presence_of :user` to models/complaint.rb

> updated the line `@complaints = Complaint.where(:user_id => current_user.id)` to the index controller in complaints_controller.rb to generate views

> added the line @complaint.user_id = current_user.id to create for adding a user id
================

> add a status row describing the status of the complaint.

> rails g migration add_column_status_to_complaints status:string

> and set its default value to "Pending" during creation

3 states: "Pending","Processing","Complete"

> admin should be able to shift it from pending > processing, then processing > complete

after complete, user can hit resolve.

===========================================================
> follow option 2 in https://github.com/plataformatec/devise/wiki/How-To:-Add-an-Admin-Role

> rails g migration add_column_admin_to_user admin:boolean

> Then using rails console, set an email to be the admin. If no email exists, create one then set it to admin.

> modify migration to be: 

class AddAdminToUsers < ActiveRecord::Migration
  def change
    add_column :users, :admin, :boolean, default: false
  end
end

> to test if user is admin, use the method `current_user.try(:admin?)` .

+++++++++++++++++++++

> add status to all .html.erb files
> add these methods to controller model
 def processing?
    status == "Processing"
  end

  def pending?
    status == "Pending"
  end

  def complete?
    status = "Complete"
  end

> update routes.rb to this
  resources :complaints do
    member do
      patch :update_status
    end
  end

> define a method update_status in complaints_controller.rb

def update_status
    new_status = @complaint.status
    if @complaint.status == 'Pending'
      new_status = 'Processing'
    elsif @complaint.status == 'Processing'
      new_status = 'Complete'
    elsif @complaint.status == 'Complete'
      new_status = 'Resolved'
    end

    @complaint.update_attribute(:status, new_status)
    redirect_to @complaint, notice: "Marked as " + new_status
  end

> update index.html.erb to accordingly use the models and method to update status from pending to processing, to complete, then to resolved.


==========================================

> added parameter `current_user` to every update status patch call in index.html.erb

edited update_status with the following conditions:

  def update_status
    new_status = @complaint.status
    test_string = "no"

    if current_user.try(:admin?)
      test_string = "yes"
      if @complaint.status == 'Pending'
        new_status = 'Processing'
      elsif @complaint.status == 'Processing'
        new_status = 'Complete'
      end
    elsif @complaint.status == 'Complete'
      new_status = 'Resolved'
    end


    @complaint.update_attribute(:status, new_status)
    redirect_to @complaint, notice: "Marked as " + new_status + test_string
  end

+++++++++++++++++++++++++++++


Model validation:

  validates :title, presence: true

Front-end validation

modified application.js to include these three
//= require jquery
//= require jquery_ujs
//= require bootstrap.min

make a new file inline_validation.js
(copy code here)

modified _form.html.erb fields to:

  <div class="field">
    <%= form.label :title %>
    <%= form.text_field :title, onkeyup: "changeHandler()" %>
  </div>

  <div class="actions">
    <%= form.submit id: "complaint_submit", disabled: "disabled" %>
  </div>

====================================



changed new.html.erb and edit in /layouts/devise to include 
  <div class="field">
    <%= f.label :name %><br />
    <%= f.text_field :name, autofocus: true %>
  </div>

  and removed autofocus attribute from email



  generated the registrations_controller, and overriden it with these attributes:
    private

  def sign_up_params
    params.require(:user).permit(:name, :email, :password, :password_confirmation)
  end

  def account_update_params
    params.require(:user).permit(:name, :email, :password, :password_confirmation, :current_password)
  end

  to add name as parameter.

  added route to registraions:
  devise_for :users, controllers: { registrations: 'users/registrations' }

  in model, added the line

    validates :name, presence: true for serverside validation

  in frontend, modified textfields like task 6.




